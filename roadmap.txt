üìù Ideas de nombres para el archivo
	‚Ä¢	WISHLIST.md
	‚Ä¢	TODO.md
	‚Ä¢	ROADMAP.md
	‚Ä¢	IMPROVEMENTS.md
	‚Ä¢	NEXT_STEPS.md

‚∏ª

üìå Wishlist de mejoras para el buscador de vuelos

Este documento recoge las ideas y mejoras que se pueden implementar en el proyecto a futuro. El objetivo es refactorizar el c√≥digo hacia un dise√±o m√°s modular, legible y escalable, aplicando principios de POO y mejores pr√°cticas en Java.

üîß Refactorizaci√≥n de la estructura
	‚Ä¢	Separaci√≥n de responsabilidades
	‚Ä¢	Crear una clase BuscadorVuelos que contenga toda la l√≥gica de b√∫squeda.
	‚Ä¢	Dejar a la clase Main √∫nicamente la interacci√≥n con el usuario (entrada/salida).
	‚Ä¢	Uso de colecciones modernas
	‚Ä¢	Reemplazar arrays por Map<String, List<String>> para manejar las conexiones de vuelos de forma m√°s clara y eficiente.
	‚Ä¢	M√©todos m√°s expresivos
	‚Ä¢	Implementar m√©todos dedicados:
	‚Ä¢	buscarDirecto()
	‚Ä¢	buscarConEscala()
	‚Ä¢	Facilitar el mantenimiento y la lectura del c√≥digo.
	‚Ä¢	Gesti√≥n del Scanner
	‚Ä¢	Usar try-with-resources para que el Scanner se cierre autom√°ticamente y evitar fugas de recursos.
	‚Ä¢	Normalizaci√≥n de entrada de usuario
	‚Ä¢	Crear un m√©todo normalizar() que elimine acentos y convierta todo a min√∫sculas.
	‚Ä¢	Evita errores al comparar cadenas.

‚∏ª

‚úàÔ∏è Mejoras futuras (funcionalidades)
	‚Ä¢	Implementar un algoritmo de b√∫squeda en grafos (BFS) para encontrar rutas con m√°s de una escala.
	‚Ä¢	Ejemplo: Madrid ‚Üí Par√≠s ‚Üí Berl√≠n ‚Üí Mosc√∫.
	‚Ä¢	Mostrar todas las rutas posibles
	‚Ä¢	No solo la primera coincidencia, sino varias opciones ordenadas por n√∫mero de escalas.
	‚Ä¢	Optimizaci√≥n por coste/tiempo
	‚Ä¢	Asignar precios o duraciones a cada vuelo y calcular la ruta m√°s barata o m√°s r√°pida.
	‚Ä¢	Carga din√°mica de datos
	‚Ä¢	Extraer las conexiones a un archivo externo (JSON, CSV, BD) en vez de hardcodearlas en el c√≥digo.
	‚Ä¢	Tests unitarios
	‚Ä¢	A√±adir JUnit para probar buscarDirecto, buscarConEscala y normalizar().

‚∏ª

üéØ Beneficios de esta refactorizaci√≥n
	‚Ä¢	C√≥digo m√°s claro y mantenible.
	‚Ä¢	Dise√±o orientado a objetos desde el inicio.
	‚Ä¢	Preparado para escalar con nuevas funcionalidades.
	‚Ä¢	Mejor experiencia para el usuario final.
